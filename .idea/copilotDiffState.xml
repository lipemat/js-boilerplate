<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/config/webpack.dist.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config/webpack.dist.ts" />
              <option name="originalContent" value="import path from 'path';&#10;import CompressionPlugin from 'compression-webpack-plugin';&#10;import MiniCssExtractPlugin from 'mini-css-extract-plugin';&#10;import {CleanWebpackPlugin} from 'clean-webpack-plugin';&#10;import {WebpackAssetsManifest} from 'webpack-assets-manifest';&#10;import {SubresourceIntegrityPlugin} from 'webpack-subresource-integrity';&#10;import ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';&#10;import WebpackAssetsHash from '../helpers/WebpackAssetsHash';&#10;import {type Configuration as WebpackConfig, ProvidePlugin, WebpackPluginInstance} from 'webpack';&#10;&#10;import {getBrowsersList, getConfig, getTsConfigFile} from '../helpers/config';&#10;import {getEntries} from '../helpers/entries';&#10;import {getPackageConfig} from '../helpers/package-config';&#10;&#10;const postcssOptions = getConfig( 'postcss.config' );&#10;const babelOptions = getConfig( 'babel.config' );&#10;const cssLoaderOptions = getConfig( 'css-loader.config' );&#10;&#10;const ManifestPlugin = new WebpackAssetsManifest( {&#10;&#9;integrity: true,&#10;&#9;integrityHashes: [ 'sha384' ],&#10;&#9;output: 'manifest.json',&#10;} );&#10;&#10;const plugins: WebpackPluginInstance[] = [&#10;&#9;new ProvidePlugin( {&#10;&#9;&#9;jQuery: 'jquery',&#10;&#9;&#9;$: 'jquery',&#10;&#9;} ),&#10;&#9;new MiniCssExtractPlugin( {&#10;&#9;&#9;filename: '[name].css',&#10;&#9;&#9;chunkFilename: '[name].[contenthash].css',&#10;&#9;} ),&#10;&#9;new CleanWebpackPlugin( {&#10;&#9;&#9;// Remove all files except the `.running` file created by &quot;Start&quot;.&#10;&#9;&#9;cleanOnceBeforeBuildPatterns: [ '**/*', '!.running' ],&#10;&#9;} ),&#10;&#9;new SubresourceIntegrityPlugin( {&#10;&#9;&#9;hashFuncNames: [ 'sha384' ],&#10;&#9;} ),&#10;&#9;new WebpackAssetsHash( ManifestPlugin ),&#10;&#9;ManifestPlugin,&#10;];&#10;&#10;// Loads a thread, which verifies any TypeScript if a project has a &quot;tsconfig.json&quot; file.&#10;if ( '' !== getTsConfigFile() ) {&#10;&#9;plugins.push( new ForkTsCheckerWebpackPlugin( {&#10;&#9;&#9;formatter: 'basic',&#10;&#9;&#9;typescript: {&#10;&#9;&#9;&#9;configFile: getTsConfigFile(),&#10;&#9;&#9;},&#10;&#9;} ) );&#10;}&#10;&#10;/**&#10; * Generate .br files if enabled.&#10; *&#10; * @note Will only generate files if 20% or more size is gained.&#10; * @see https://webpack.js.org/plugins/compression-webpack-plugin/#using-brotli&#10; */&#10;if ( getPackageConfig().brotliFiles ) {&#10;&#9;plugins.push( new CompressionPlugin( {&#10;&#9;&#9;algorithm: 'brotliCompress',&#10;&#9;&#9;deleteOriginalAssets: false,&#10;&#9;&#9;test: /\.(js|css)$/,&#10;&#9;} ) );&#10;}&#10;&#10;&#10;const config: WebpackConfig = {&#10;&#9;devtool: false,&#10;&#9;entry: getEntries(),&#10;&#9;mode: 'production',&#10;&#9;stats: {&#10;&#9;&#9;assets: true,&#10;&#9;&#9;assetsSort: 'size',&#10;&#9;&#9;assetsSpace: 100,&#10;&#9;&#9;cachedModules: false,&#10;&#9;&#9;cachedAssets: true,&#10;&#9;&#9;children: false,&#10;&#9;&#9;colors: {&#10;&#9;&#9;&#9;// Change green to yellow, as my default terminal color is green.&#10;&#9;&#9;&#9;green: '\u001b[93m',&#10;&#9;&#9;},&#10;&#9;&#9;hash: false,&#10;&#9;&#9;groupAssetsByChunk: false,&#10;&#9;&#9;groupAssetsByEmitStatus: false,&#10;&#9;&#9;groupAssetsByExtension: false,&#10;&#9;&#9;groupAssetsByInfo: false,&#10;&#9;&#9;groupAssetsByPath: false,&#10;&#9;&#9;modules: false,&#10;&#9;&#9;timings: false,&#10;&#9;&#9;version: false,&#10;&#9;},&#10;&#9;optimization: {&#10;&#9;&#9;moduleIds: 'deterministic',&#10;&#9;},&#10;&#9;// Displays warnings of size limits.&#10;&#9;performance: {&#10;&#9;&#9;hints: 'warning',&#10;&#9;},&#10;&#9;externals: {&#10;&#9;&#9;jquery: 'jQuery',&#10;&#9;},&#10;&#9;target: 'browserslist:' + getBrowsersList().join( ', ' ),&#10;&#9;output: {&#10;&#9;&#9;path: path.resolve( getPackageConfig().workingDirectory, 'dist' ),&#10;&#9;&#9;filename: '[name].js',&#10;&#9;&#9;publicPath: 'auto', // Change this if you want to use an external CDN etc.&#10;&#9;&#9;chunkFilename: '[name].[contenthash].js',&#10;&#9;&#9;crossOriginLoading: 'anonymous',&#10;&#9;},&#10;&#9;resolve: {&#10;&#9;&#9;extensions: [ '.ts', '.tsx', '.js', '.jsx', '.json', '.pcss' ],&#10;&#9;&#9;modules: [&#10;&#9;&#9;&#9;path.resolve( getPackageConfig().workingDirectory, 'src' ),&#10;&#9;&#9;&#9;'node_modules',&#10;&#9;&#9;],&#10;&#9;},&#10;&#9;plugins,&#10;&#9;module: {&#10;&#9;&#9;strictExportPresence: true,&#10;&#9;&#9;rules: [&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.[jt]sx?$/,&#10;&#9;&#9;&#9;&#9;loader: 'babel-loader',&#10;&#9;&#9;&#9;&#9;exclude: /node_modules/,&#10;&#9;&#9;&#9;&#9;options: babelOptions,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.css$/,&#10;&#9;&#9;&#9;&#9;use: [&#10;&#9;&#9;&#9;&#9;&#9;MiniCssExtractPlugin.loader,&#10;&#9;&#9;&#9;&#9;&#9;'css-loader',&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'clean-css-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;level: 2,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sourceMap: false,&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;],&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.pcss$/,&#10;&#9;&#9;&#9;&#9;use: [&#10;&#9;&#9;&#9;&#9;&#9;MiniCssExtractPlugin.loader,&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: '@teamsupercell/typings-for-css-modules-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;banner: '// Autogenerated by typings-for-css-modules-loader.',&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;disableLocalsExport: true,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;prettierConfigFile: path.resolve( __dirname, '../helpers/.prettierrc.json' ),&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'css-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: cssLoaderOptions,&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'postcss-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;postcssOptions,&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;].filter( loader =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;if ( ! getPackageConfig().cssTsFiles &amp;&amp; 'object' === typeof loader ) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;return loader.loader !== '@teamsupercell/typings-for-css-modules-loader';&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;return true;&#10;&#9;&#9;&#9;&#9;} ),&#10;&#9;&#9;&#9;},&#10;&#9;&#9;],&#10;&#9;},&#10;};&#10;&#10;export default config;&#10;module.exports = config;&#10;" />
              <option name="updatedContent" value="import path from 'path';&#10;import CompressionPlugin from 'compression-webpack-plugin';&#10;import MiniCssExtractPlugin from 'mini-css-extract-plugin';&#10;import {CleanWebpackPlugin} from 'clean-webpack-plugin';&#10;import {WebpackAssetsManifest} from 'webpack-assets-manifest';&#10;import {SubresourceIntegrityPlugin} from 'webpack-subresource-integrity';&#10;import ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';&#10;import WebpackAssetsHash from '../helpers/WebpackAssetsHash';&#10;import {type Configuration as WebpackConfig, ProvidePlugin, WebpackPluginInstance} from 'webpack';&#10;&#10;import {getBrowsersList, getConfig, getTsConfigFile} from '../helpers/config';&#10;import {getEntries} from '../helpers/entries';&#10;import {getPackageConfig} from '../helpers/package-config';&#10;&#10;const postcssOptions = getConfig( 'postcss.config' );&#10;const babelOptions = getConfig( 'babel.config' );&#10;const cssLoaderOptions = getConfig( 'css-loader.config' );&#10;&#10;const ManifestPlugin = new WebpackAssetsManifest( {&#10;&#9;integrity: true,&#10;&#9;integrityHashes: [ 'sha384' ],&#10;&#9;output: 'manifest.json',&#10;} );&#10;&#10;const plugins: WebpackPluginInstance[] = [&#10;&#9;new ProvidePlugin( {&#10;&#9;&#9;jQuery: 'jquery',&#10;&#9;&#9;$: 'jquery',&#10;&#9;} ),&#10;&#9;new MiniCssExtractPlugin( {&#10;&#9;&#9;filename: '[name].css',&#10;&#9;&#9;chunkFilename: '[name].[contenthash].css',&#10;&#9;} ),&#10;&#9;new CleanWebpackPlugin( {&#10;&#9;&#9;// Remove all files except the `.running` file created by &quot;Start&quot;.&#10;&#9;&#9;cleanOnceBeforeBuildPatterns: [ '**/*', '!.running' ],&#10;&#9;} ),&#10;&#9;new SubresourceIntegrityPlugin( {&#10;&#9;&#9;hashFuncNames: [ 'sha384' ],&#10;&#9;} ),&#10;&#9;new WebpackAssetsHash( ManifestPlugin ),&#10;&#9;ManifestPlugin,&#10;];&#10;&#10;// Loads a thread, which verifies any TypeScript if a project has a &quot;tsconfig.json&quot; file.&#10;if ( '' !== getTsConfigFile() ) {&#10;&#9;plugins.push( new ForkTsCheckerWebpackPlugin( {&#10;&#9;&#9;formatter: 'basic',&#10;&#9;&#9;typescript: {&#10;&#9;&#9;&#9;configFile: getTsConfigFile(),&#10;&#9;&#9;},&#10;&#9;} ) );&#10;}&#10;&#10;/**&#10; * Generate .br files if enabled.&#10; *&#10; * @note Will only generate files if 20% or more size is gained.&#10; * @see https://webpack.js.org/plugins/compression-webpack-plugin/#using-brotli&#10; */&#10;if ( getPackageConfig().brotliFiles ) {&#10;&#9;plugins.push( new CompressionPlugin( {&#10;&#9;&#9;algorithm: 'brotliCompress',&#10;&#9;&#9;deleteOriginalAssets: false,&#10;&#9;&#9;test: /\.(js|css)$/,&#10;&#9;} ) );&#10;}&#10;&#10;&#10;const config: WebpackConfig = {&#10;&#9;devtool: false,&#10;&#9;entry: getEntries(),&#10;&#9;mode: 'production',&#10;&#9;stats: {&#10;&#9;&#9;assets: true,&#10;&#9;&#9;assetsSort: 'size',&#10;&#9;&#9;assetsSpace: 100,&#10;&#9;&#9;cachedModules: false,&#10;&#9;&#9;cachedAssets: true,&#10;&#9;&#9;children: false,&#10;&#9;&#9;colors: {&#10;&#9;&#9;&#9;// Change green to yellow, as my default terminal color is green.&#10;&#9;&#9;&#9;green: '\u001b[93m',&#10;&#9;&#9;},&#10;&#9;&#9;hash: false,&#10;&#9;&#9;groupAssetsByChunk: false,&#10;&#9;&#9;groupAssetsByEmitStatus: false,&#10;&#9;&#9;groupAssetsByExtension: false,&#10;&#9;&#9;groupAssetsByInfo: false,&#10;&#9;&#9;groupAssetsByPath: false,&#10;&#9;&#9;modules: false,&#10;&#9;&#9;timings: false,&#10;&#9;&#9;version: false,&#10;&#9;},&#10;&#9;optimization: {&#10;&#9;&#9;moduleIds: 'deterministic',&#10;&#9;},&#10;&#9;// Displays warnings of size limits.&#10;&#9;performance: {&#10;&#9;&#9;hints: 'warning',&#10;&#9;},&#10;&#9;externals: {&#10;&#9;&#9;jquery: 'jQuery',&#10;&#9;},&#10;&#9;target: 'browserslist:' + getBrowsersList().join( ', ' ),&#10;&#9;output: {&#10;&#9;&#9;path: path.resolve( getPackageConfig().workingDirectory, 'dist' ),&#10;&#9;&#9;filename: '[name].js',&#10;&#9;&#9;publicPath: 'auto', // Change this if you want to use an external CDN etc.&#10;&#9;&#9;chunkFilename: '[name].[contenthash].js',&#10;&#9;&#9;crossOriginLoading: 'anonymous',&#10;&#9;},&#10;&#9;resolve: {&#10;&#9;&#9;extensions: [ '.ts', '.tsx', '.js', '.jsx', '.json', '.pcss' ],&#10;&#9;&#9;modules: [&#10;&#9;&#9;&#9;path.resolve( getPackageConfig().workingDirectory, 'src' ),&#10;&#9;&#9;&#9;'node_modules',&#10;&#9;&#9;],&#10;&#9;},&#10;&#9;plugins,&#10;&#9;module: {&#10;&#9;&#9;strictExportPresence: true,&#10;&#9;&#9;rules: [&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.[jt]sx?$/,&#10;&#9;&#9;&#9;&#9;loader: 'babel-loader',&#10;&#9;&#9;&#9;&#9;exclude: /node_modules/,&#10;&#9;&#9;&#9;&#9;options: babelOptions,&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.css$/,&#10;&#9;&#9;&#9;&#9;use: [&#10;&#9;&#9;&#9;&#9;&#9;MiniCssExtractPlugin.loader,&#10;&#9;&#9;&#9;&#9;&#9;'css-loader',&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'clean-css-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;level: 2,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sourceMap: false,&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;],&#10;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;test: /\.pcss$/,&#10;&#9;&#9;&#9;&#9;use: [&#10;&#9;&#9;&#9;&#9;&#9;MiniCssExtractPlugin.loader,&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: '@teamsupercell/typings-for-css-modules-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;banner: '// Autogenerated by typings-for-css-modules-loader.',&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;disableLocalsExport: true,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;prettierConfigFile: path.resolve( __dirname, '../helpers/.prettierrc.json' ),&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: path.resolve( __dirname, '../lib/format-css-module-typings.ts' ),&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'css-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: cssLoaderOptions,&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;&#9;&#9;loader: 'postcss-loader',&#10;&#9;&#9;&#9;&#9;&#9;&#9;options: {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;postcssOptions,&#10;&#9;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;].filter( loader =&gt; {&#10;&#9;&#9;&#9;&#9;&#9;if ( ! getPackageConfig().cssTsFiles &amp;&amp; 'object' === typeof loader ) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;return loader.loader !== '@teamsupercell/typings-for-css-modules-loader';&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;return true;&#10;&#9;&#9;&#9;&#9;} ),&#10;&#9;&#9;&#9;},&#10;&#9;&#9;],&#10;&#9;},&#10;};&#10;&#10;export default config;&#10;module.exports = config;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/format-css-module-typings.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/format-css-module-typings.ts" />
              <option name="originalContent" value="import type {LoaderContext} from 'webpack';&#10;" />
              <option name="updatedContent" value="import type {LoaderContext} from 'webpack';&#10;import * as fs from 'fs';&#10;import * as path from 'path';&#10;&#10;interface PrettierConfig {&#10;&#9;singleQuote?: boolean;&#10;&#9;useTabs?: boolean;&#10;&#9;tabWidth?: number;&#10;&#9;endOfLine?: 'lf' | 'crlf' | 'cr' | 'auto';&#10;}&#10;&#10;function formatCssModuleTypings(this: LoaderContext&lt;any&gt;, source: string): string {&#10;&#9;const callback = this.async();&#10;&#9;&#10;&#9;if (!callback) {&#10;&#9;&#9;throw new Error('Async callback not available');&#10;&#9;}&#10;&#10;&#9;try {&#10;&#9;&#9;const resourcePath = this.resourcePath;&#10;&#9;&#9;const typingsPath = resourcePath.replace(/\.pcss$/, '.pcss.d.ts');&#10;&#9;&#9;&#10;&#9;&#9;if (!fs.existsSync(typingsPath)) {&#10;&#9;&#9;&#9;callback(null, source);&#10;&#9;&#9;&#9;return source;&#10;&#9;&#9;}&#10;&#10;&#9;&#9;const prettierConfigPath = path.resolve(__dirname, '../helpers/.prettierrc.json');&#10;&#9;&#9;let prettierConfig: PrettierConfig = {};&#10;&#10;&#9;&#9;if (fs.existsSync(prettierConfigPath)) {&#10;&#9;&#9;&#9;const configContent = fs.readFileSync(prettierConfigPath, 'utf8');&#10;&#9;&#9;&#9;prettierConfig = JSON.parse(configContent);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;let typingsContent = fs.readFileSync(typingsPath, 'utf8');&#10;&#9;&#9;&#10;&#9;&#9;typingsContent = formatTypeScriptContent(typingsContent, prettierConfig);&#10;&#9;&#9;&#10;&#9;&#9;fs.writeFileSync(typingsPath, typingsContent);&#10;&#9;&#9;&#10;&#9;&#9;callback(null, source);&#10;&#9;&#9;return source;&#10;&#9;} catch (error) {&#10;&#9;&#9;callback(error);&#10;&#9;&#9;return source;&#10;&#9;}&#10;}&#10;&#10;function formatTypeScriptContent(content: string, config: PrettierConfig): string {&#10;&#9;let formatted = content;&#10;&#10;&#9;if (config.singleQuote) {&#10;&#9;&#9;formatted = formatted.replace(/&quot;/g, &quot;'&quot;);&#10;&#9;}&#10;&#10;&#9;if (config.useTabs &amp;&amp; config.tabWidth) {&#10;&#9;&#9;const spaces = ' '.repeat(config.tabWidth);&#10;&#9;&#9;const tabPattern = new RegExp(`^${spaces}`, 'gm');&#10;&#9;&#9;formatted = formatted.replace(tabPattern, '\t');&#10;&#9;&#9;&#10;&#9;&#9;const multipleSpacesPattern = new RegExp(`^( {${config.tabWidth}})+`, 'gm');&#10;&#9;&#9;formatted = formatted.replace(multipleSpacesPattern, (match) =&gt; {&#10;&#9;&#9;&#9;const tabCount = match.length / config.tabWidth;&#10;&#9;&#9;&#9;return '\t'.repeat(tabCount);&#10;&#9;&#9;});&#10;&#9;}&#10;&#10;&#9;if (config.endOfLine) {&#10;&#9;&#9;switch (config.endOfLine) {&#10;&#9;&#9;&#9;case 'lf':&#10;&#9;&#9;&#9;&#9;formatted = formatted.replace(/\r\n/g, '\n').replace(/\r/g, '\n');&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;case 'crlf':&#10;&#9;&#9;&#9;&#9;formatted = formatted.replace(/\r\n/g, '\n').replace(/\r/g, '\n').replace(/\n/g, '\r\n');&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;&#9;case 'cr':&#10;&#9;&#9;&#9;&#9;formatted = formatted.replace(/\r\n/g, '\n').replace(/\n/g, '\r');&#10;&#9;&#9;&#9;&#9;break;&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;formatted = formatted.replace(/;\s*$/gm, ';');&#10;&#9;formatted = formatted.replace(/{\s*$/gm, ' {');&#10;&#9;formatted = formatted.replace(/}\s*$/gm, '}');&#10;&#9;formatted = formatted.replace(/,\s*$/gm, ',');&#10;&#10;&#9;return formatted;&#10;}&#10;&#10;export default formatCssModuleTypings;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>