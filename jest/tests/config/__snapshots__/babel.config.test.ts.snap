// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel.config.test.ts Included plugins 1`] = `
""use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
class Share extends _react.Component {
  render() {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        className: "twitter-share-button",
        onClick: this.openFacebook.bind(this),
        children: "Facebook"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        className: "twitter-share-button",
        onClick: this.openTwitter.bind(this),
        children: "Twitter"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onClick: this.props.close,
        children: "Close"
      })]
    });
  }
  openTwitter() {
    const $url = encodeURI(this.props.url ?? '');
    const $href = 'https://twitter.com/intent/tweet?url=' + $url;
    window.open($href, 'Twitter', 'width=640,height=580');
  }
  openFacebook() {
    const $url = encodeURI(this.props.url ?? '');
    const $href = 'https://www.facebook.com/sharer/sharer.php?u=' + $url;
    window.open($href, 'Twitter', 'width=640,height=580');
  }
}
exports.default = Share;"
`;

exports[`babel.config.test.ts Included plugins 2`] = `
[
  "objectRestSpread",
  "classProperties",
  "jsx",
  [
    "typescript",
    {
      "disallowAmbiguousJSXLike": false,
      "dts": undefined,
    },
  ],
  "explicitResourceManagement",
  "classStaticBlock",
  "privateIn",
  "classProperties",
  "numericSeparator",
  "nullishCoalescingOperator",
  "optionalChaining",
  "jsonStrings",
  "optionalCatchBinding",
  "asyncGenerators",
  "objectRestSpread",
  "exportNamespaceFrom",
  "dynamicImport",
  "topLevelAwait",
  "importMeta",
]
`;

exports[`babel.config.test.ts Included plugins 3`] = `
""use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _jsxFileName = "\\\\js-boilerplate\\\\share.tsx";
class Share extends _react.Component {
  render() {
    return /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)("div", {
      children: [/*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)("button", {
        className: "twitter-share-button",
        onClick: this.openFacebook.bind(this),
        children: "Facebook"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 12,
        columnNumber: 5
      }, this), /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)("button", {
        className: "twitter-share-button",
        onClick: this.openTwitter.bind(this),
        children: "Twitter"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 18,
        columnNumber: 5
      }, this), /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)("button", {
        onClick: this.props.close,
        children: "Close"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 5
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 4
    }, this);
  }
  openTwitter() {
    const $url = encodeURI(this.props.url ?? '');
    const $href = 'https://twitter.com/intent/tweet?url=' + $url;
    window.open($href, 'Twitter', 'width=640,height=580');
  }
  openFacebook() {
    const $url = encodeURI(this.props.url ?? '');
    const $href = 'https://www.facebook.com/sharer/sharer.php?u=' + $url;
    window.open($href, 'Twitter', 'width=640,height=580');
  }
}
exports.default = Share;"
`;

exports[`babel.config.test.ts Included plugins 4`] = `
[
  "objectRestSpread",
  "classProperties",
  "jsx",
  [
    "typescript",
    {
      "disallowAmbiguousJSXLike": false,
      "dts": undefined,
    },
  ],
  "explicitResourceManagement",
  "classStaticBlock",
  "privateIn",
  "classProperties",
  "numericSeparator",
  "nullishCoalescingOperator",
  "optionalChaining",
  "jsonStrings",
  "optionalCatchBinding",
  "asyncGenerators",
  "objectRestSpread",
  "exportNamespaceFrom",
  "dynamicImport",
  "topLevelAwait",
  "importMeta",
]
`;

exports[`babel.config.test.ts Transforming works properly: Chrome 50 1`] = `
""use strict";

require("core-js/modules/es.error.cause.js");
require("core-js/modules/es.array.push.js");
require("core-js/modules/es.array.reduce.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.iterator.constructor.js");
require("core-js/modules/es.iterator.reduce.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.dot-all.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/web.url.js");
require("core-js/modules/web.url.can-parse.js");
require("core-js/modules/web.url.to-json.js");
require("core-js/modules/web.url-search-params.js");
require("core-js/modules/web.url-search-params.delete.js");
require("core-js/modules/web.url-search-params.has.js");
require("core-js/modules/web.url-search-params.size.js");
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(e, r) { return new BabelRegExp(e, void 0, r); }; var e = RegExp.prototype, r = new WeakMap(); function BabelRegExp(e, t, p) { var o = RegExp(e, t); return r.set(o, p || r.get(e)), _setPrototypeOf(o, BabelRegExp.prototype); } function buildGroups(e, t) { var p = r.get(t); return Object.keys(p).reduce(function (r, t) { var o = p[t]; if ("number" == typeof o) r[t] = e[o];else { for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++; r[t] = e[o[i]]; } return r; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) { var t = e.exec.call(this, r); if (t) { t.groups = buildGroups(t, this); var p = t.indices; p && (p.groups = buildGroups(p, this)); } return t; }, BabelRegExp.prototype[Symbol.replace] = function (t, p) { if ("string" == typeof p) { var o = r.get(this); return e[Symbol.replace].call(this, t, p.replace(/\\$<([^>]+)(>|$)/g, function (e, r, t) { if ("" === t) return e; var p = o[r]; return Array.isArray(p) ? "$" + p.join("$") : "number" == typeof p ? "$" + p : ""; })); } if ("function" == typeof p) { var i = this; return e[Symbol.replace].call(this, t, function () { var e = arguments; return "object" != typeof e[e.length - 1] && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e); }); } return e[Symbol.replace].call(this, t, p); }, _wrapRegExp.apply(this, arguments); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _awaitAsyncGenerator(e) { return new _OverloadYield(e, 0); }
function _wrapAsyncGenerator(e) { return function () { return new AsyncGenerator(e.apply(this, arguments)); }; }
function AsyncGenerator(e) { var r, t; function resume(r, t) { try { var n = e[r](t), o = n.value, u = o instanceof _OverloadYield; Promise.resolve(u ? o.v : o).then(function (t) { if (u) { var i = "return" === r ? "return" : "next"; if (!o.k || t.done) return resume(i, t); t = e[i](t).value; } settle(n.done ? "return" : "normal", t); }, function (e) { resume("throw", e); }); } catch (e) { settle("throw", e); } } function settle(e, n) { switch (e) { case "return": r.resolve({ value: n, done: !0 }); break; case "throw": r.reject(n); break; default: r.resolve({ value: n, done: !1 }); } (r = r.next) ? resume(r.key, r.arg) : t = null; } this._invoke = function (e, n) { return new Promise(function (o, u) { var i = { key: e, arg: n, resolve: o, reject: u, next: null }; t ? t = t.next = i : (r = t = i, resume(e, n)); }); }, "function" != typeof e.return && (this.return = void 0); }
AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; }, AsyncGenerator.prototype.next = function (e) { return this._invoke("next", e); }, AsyncGenerator.prototype.throw = function (e) { return this._invoke("throw", e); }, AsyncGenerator.prototype.return = function (e) { return this._invoke("return", e); };
function _OverloadYield(e, d) { this.v = e, this.k = d; }
describe('Tests can run with modern syntax.', () => {
  function foo() {
    return _foo.apply(this, arguments);
  }
  function _foo() {
    _foo = _wrapAsyncGenerator(function* () {
      yield _awaitAsyncGenerator(1);
      yield 2;
    });
    return _foo.apply(this, arguments);
  }
  test('support for async generator functions', /*#__PURE__*/_asyncToGenerator(function* () {
    const generator = foo();
    expect(yield generator.next()).toEqual({
      done: false,
      value: 2
    });
  }));
  test('support for optional chaining', () => {
    var _obj$foo, _obj$foo2;
    const obj = {
      foo: {
        bar: 42
      }
    };
    expect(obj === null || obj === void 0 || (_obj$foo = obj.foo) === null || _obj$foo === void 0 ? void 0 : _obj$foo.bar).toEqual(42);
    // @ts-expect-error
    expect(obj === null || obj === void 0 || (_obj$foo2 = obj.foo) === null || _obj$foo2 === void 0 ? void 0 : _obj$foo2.baz).toEqual(undefined);
  });
  test('support for url canParse', () => {
    if ('canParse' in URL) {
      expect(URL.canParse('https://example.com')).toEqual(true);
    } else {
      // @ts-ignore
      expect(URL.canParse).toBeUndefined();
    }
  });
  it('Supports named capturing regexes', () => {
    var _match$groups;
    const regex = /*#__PURE__*/_wrapRegExp(/(foo)/, {
      name: 1
    });
    const match = regex.exec('foo');
    expect(match === null || match === void 0 || (_match$groups = match.groups) === null || _match$groups === void 0 ? void 0 : _match$groups.name).toEqual('foo');
  });
  it('Supports private properties in classes', () => {
    var _privateProperty = /*#__PURE__*/new WeakMap();
    class MyClass {
      constructor() {
        _classPrivateFieldInitSpec(this, _privateProperty, 'private');
      }
      getPrivateProperty() {
        return _classPrivateFieldGet(_privateProperty, this);
      }
    }
    const instance = new MyClass();
    expect(instance.getPrivateProperty()).toEqual('private');
  });
  it('Supports class fields', () => {
    class MyClass {
      constructor() {
        _defineProperty(this, "field", 'field value');
      }
      getField() {
        return this.field;
      }
    }
    const instance = new MyClass();
    expect(instance.getField()).toEqual('field value');
  });
});"
`;

exports[`babel.config.test.ts Transforming works properly: Chrome 130 1`] = `
""use strict";

describe('Tests can run with modern syntax.', () => {
  async function* foo() {
    await 1;
    yield 2;
  }
  test('support for async generator functions', async () => {
    const generator = foo();
    expect(await generator.next()).toEqual({
      done: false,
      value: 2
    });
  });
  test('support for optional chaining', () => {
    const obj = {
      foo: {
        bar: 42
      }
    };
    expect(obj?.foo?.bar).toEqual(42);
    // @ts-expect-error
    expect(obj?.foo?.baz).toEqual(undefined);
  });
  test('support for url canParse', () => {
    if ('canParse' in URL) {
      expect(URL.canParse('https://example.com')).toEqual(true);
    } else {
      // @ts-ignore
      expect(URL.canParse).toBeUndefined();
    }
  });
  it('Supports named capturing regexes', () => {
    const regex = /(?<name>foo)/;
    const match = regex.exec('foo');
    expect(match?.groups?.name).toEqual('foo');
  });
  it('Supports private properties in classes', () => {
    class MyClass {
      #privateProperty = 'private';
      getPrivateProperty() {
        return this.#privateProperty;
      }
    }
    const instance = new MyClass();
    expect(instance.getPrivateProperty()).toEqual('private');
  });
  it('Supports class fields', () => {
    class MyClass {
      field = 'field value';
      getField() {
        return this.field;
      }
    }
    const instance = new MyClass();
    expect(instance.getField()).toEqual('field value');
  });
});"
`;

exports[`babel.config.test.ts Transforming works properly: Default browsers 1`] = `
""use strict";

require("core-js/modules/web.url.can-parse.js");
require("core-js/modules/web.url-search-params.delete.js");
require("core-js/modules/web.url-search-params.has.js");
require("core-js/modules/web.url-search-params.size.js");
describe('Tests can run with modern syntax.', () => {
  async function* foo() {
    await 1;
    yield 2;
  }
  test('support for async generator functions', async () => {
    const generator = foo();
    expect(await generator.next()).toEqual({
      done: false,
      value: 2
    });
  });
  test('support for optional chaining', () => {
    const obj = {
      foo: {
        bar: 42
      }
    };
    expect(obj?.foo?.bar).toEqual(42);
    // @ts-expect-error
    expect(obj?.foo?.baz).toEqual(undefined);
  });
  test('support for url canParse', () => {
    if ('canParse' in URL) {
      expect(URL.canParse('https://example.com')).toEqual(true);
    } else {
      // @ts-ignore
      expect(URL.canParse).toBeUndefined();
    }
  });
  it('Supports named capturing regexes', () => {
    const regex = /(?<name>foo)/;
    const match = regex.exec('foo');
    expect(match?.groups?.name).toEqual('foo');
  });
  it('Supports private properties in classes', () => {
    class MyClass {
      #privateProperty = 'private';
      getPrivateProperty() {
        return this.#privateProperty;
      }
    }
    const instance = new MyClass();
    expect(instance.getPrivateProperty()).toEqual('private');
  });
  it('Supports class fields', () => {
    class MyClass {
      field = 'field value';
      getField() {
        return this.field;
      }
    }
    const instance = new MyClass();
    expect(instance.getField()).toEqual('field value');
  });
});"
`;

exports[`babel.config.test.ts Transforming works properly: IE 11 1`] = `
""use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.symbol.replace.js");
require("core-js/modules/es.symbol.to-primitive.js");
require("core-js/modules/es.error.cause.js");
require("core-js/modules/es.array.join.js");
require("core-js/modules/es.array.push.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.date.to-primitive.js");
require("core-js/modules/es.iterator.constructor.js");
require("core-js/modules/es.iterator.reduce.js");
require("core-js/modules/es.number.constructor.js");
require("core-js/modules/es.object.get-prototype-of.js");
require("core-js/modules/es.object.keys.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.dot-all.js");
require("core-js/modules/es.regexp.sticky.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.function.name.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/web.url.js");
require("core-js/modules/web.url.can-parse.js");
require("core-js/modules/web.url.to-json.js");
require("core-js/modules/web.url-search-params.js");
require("core-js/modules/web.url-search-params.delete.js");
require("core-js/modules/web.url-search-params.has.js");
require("core-js/modules/web.url-search-params.size.js");
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(e, r) { return new BabelRegExp(e, void 0, r); }; var e = RegExp.prototype, r = new WeakMap(); function BabelRegExp(e, t, p) { var o = RegExp(e, t); return r.set(o, p || r.get(e)), _setPrototypeOf(o, BabelRegExp.prototype); } function buildGroups(e, t) { var p = r.get(t); return Object.keys(p).reduce(function (r, t) { var o = p[t]; if ("number" == typeof o) r[t] = e[o];else { for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++; r[t] = e[o[i]]; } return r; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) { var t = e.exec.call(this, r); if (t) { t.groups = buildGroups(t, this); var p = t.indices; p && (p.groups = buildGroups(p, this)); } return t; }, BabelRegExp.prototype[Symbol.replace] = function (t, p) { if ("string" == typeof p) { var o = r.get(this); return e[Symbol.replace].call(this, t, p.replace(/\\$<([^>]+)(>|$)/g, function (e, r, t) { if ("" === t) return e; var p = o[r]; return Array.isArray(p) ? "$" + p.join("$") : "number" == typeof p ? "$" + p : ""; })); } if ("function" == typeof p) { var i = this; return e[Symbol.replace].call(this, t, function () { var e = arguments; return "object" != _typeof(e[e.length - 1]) && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e); }); } return e[Symbol.replace].call(this, t, p); }, _wrapRegExp.apply(this, arguments); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _awaitAsyncGenerator(e) { return new _OverloadYield(e, 0); }
function _wrapAsyncGenerator(e) { return function () { return new AsyncGenerator(e.apply(this, arguments)); }; }
function AsyncGenerator(e) { var r, t; function resume(r, t) { try { var n = e[r](t), o = n.value, u = o instanceof _OverloadYield; Promise.resolve(u ? o.v : o).then(function (t) { if (u) { var i = "return" === r ? "return" : "next"; if (!o.k || t.done) return resume(i, t); t = e[i](t).value; } settle(n.done ? "return" : "normal", t); }, function (e) { resume("throw", e); }); } catch (e) { settle("throw", e); } } function settle(e, n) { switch (e) { case "return": r.resolve({ value: n, done: !0 }); break; case "throw": r.reject(n); break; default: r.resolve({ value: n, done: !1 }); } (r = r.next) ? resume(r.key, r.arg) : t = null; } this._invoke = function (e, n) { return new Promise(function (o, u) { var i = { key: e, arg: n, resolve: o, reject: u, next: null }; t ? t = t.next = i : (r = t = i, resume(e, n)); }); }, "function" != typeof e.return && (this.return = void 0); }
AsyncGenerator.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; }, AsyncGenerator.prototype.next = function (e) { return this._invoke("next", e); }, AsyncGenerator.prototype.throw = function (e) { return this._invoke("throw", e); }, AsyncGenerator.prototype.return = function (e) { return this._invoke("return", e); };
function _OverloadYield(e, d) { this.v = e, this.k = d; }
describe('Tests can run with modern syntax.', function () {
  function foo() {
    return _foo.apply(this, arguments);
  }
  function _foo() {
    _foo = _wrapAsyncGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return _awaitAsyncGenerator(1);
          case 1:
            _context.n = 2;
            return 2;
          case 2:
            return _context.a(2);
        }
      }, _callee);
    }));
    return _foo.apply(this, arguments);
  }
  test('support for async generator functions', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
    var generator, _t, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          generator = foo();
          _t = expect;
          _context2.n = 1;
          return generator.next();
        case 1:
          _t2 = _context2.v;
          _t(_t2).toEqual({
            done: false,
            value: 2
          });
        case 2:
          return _context2.a(2);
      }
    }, _callee2);
  })));
  test('support for optional chaining', function () {
    var _obj$foo, _obj$foo2;
    var obj = {
      foo: {
        bar: 42
      }
    };
    expect(obj === null || obj === void 0 || (_obj$foo = obj.foo) === null || _obj$foo === void 0 ? void 0 : _obj$foo.bar).toEqual(42);
    // @ts-expect-error
    expect(obj === null || obj === void 0 || (_obj$foo2 = obj.foo) === null || _obj$foo2 === void 0 ? void 0 : _obj$foo2.baz).toEqual(undefined);
  });
  test('support for url canParse', function () {
    if ('canParse' in URL) {
      expect(URL.canParse('https://example.com')).toEqual(true);
    } else {
      // @ts-ignore
      expect(URL.canParse).toBeUndefined();
    }
  });
  it('Supports named capturing regexes', function () {
    var _match$groups;
    var regex = /*#__PURE__*/_wrapRegExp(/(foo)/, {
      name: 1
    });
    var match = regex.exec('foo');
    expect(match === null || match === void 0 || (_match$groups = match.groups) === null || _match$groups === void 0 ? void 0 : _match$groups.name).toEqual('foo');
  });
  it('Supports private properties in classes', function () {
    var _privateProperty = /*#__PURE__*/new WeakMap();
    var MyClass = /*#__PURE__*/function () {
      function MyClass() {
        _classCallCheck(this, MyClass);
        _classPrivateFieldInitSpec(this, _privateProperty, 'private');
      }
      return _createClass(MyClass, [{
        key: "getPrivateProperty",
        value: function getPrivateProperty() {
          return _classPrivateFieldGet(_privateProperty, this);
        }
      }]);
    }();
    var instance = new MyClass();
    expect(instance.getPrivateProperty()).toEqual('private');
  });
  it('Supports class fields', function () {
    var MyClass = /*#__PURE__*/function () {
      function MyClass() {
        _classCallCheck(this, MyClass);
        _defineProperty(this, "field", 'field value');
      }
      return _createClass(MyClass, [{
        key: "getField",
        value: function getField() {
          return this.field;
        }
      }]);
    }();
    var instance = new MyClass();
    expect(instance.getField()).toEqual('field value');
  });
});"
`;
